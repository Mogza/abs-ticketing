// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ticket

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TicketMetaData contains all meta data concerning the Ticket contract.
var TicketMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_organizer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b5060405162003bd738038062003bd7833981810160405281019062000036919062000584565b808888815f9081620000499190620008f2565b5080600190816200005b9190620008f2565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d1575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000c89190620009e7565b60405180910390fd5b620000e2816200013b60201b60201c565b5085600b9081620000f49190620008f2565b5084600c8190555083600d8190555082600e8190555081600f90816200011b9190620008f2565b506200012d81620001fe60201b60201c565b505050505050505062000a02565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200020e6200029560201b60201c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000281575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620002789190620009e7565b60405180910390fd5b62000292816200013b60201b60201c565b50565b620002a56200033760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002cb6200033e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200033557620002f76200033760201b60201c565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016200032c9190620009e7565b60405180910390fd5b565b5f33905090565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620003c7826200037f565b810181811067ffffffffffffffff82111715620003e957620003e86200038f565b5b80604052505050565b5f620003fd62000366565b90506200040b8282620003bc565b919050565b5f67ffffffffffffffff8211156200042d576200042c6200038f565b5b62000438826200037f565b9050602081019050919050565b5f5b838110156200046457808201518184015260208101905062000447565b5f8484015250505050565b5f620004856200047f8462000410565b620003f2565b905082815260208101848484011115620004a457620004a36200037b565b5b620004b184828562000445565b509392505050565b5f82601f830112620004d057620004cf62000377565b5b8151620004e28482602086016200046f565b91505092915050565b5f819050919050565b620004ff81620004eb565b81146200050a575f80fd5b50565b5f815190506200051d81620004f4565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200054e8262000523565b9050919050565b620005608162000542565b81146200056b575f80fd5b50565b5f815190506200057e8162000555565b92915050565b5f805f805f805f80610100898b031215620005a457620005a36200036f565b5b5f89015167ffffffffffffffff811115620005c457620005c362000373565b5b620005d28b828c01620004b9565b985050602089015167ffffffffffffffff811115620005f657620005f562000373565b5b620006048b828c01620004b9565b975050604089015167ffffffffffffffff81111562000628576200062762000373565b5b620006368b828c01620004b9565b9650506060620006498b828c016200050d565b95505060806200065c8b828c016200050d565b94505060a06200066f8b828c016200050d565b93505060c089015167ffffffffffffffff81111562000693576200069262000373565b5b620006a18b828c01620004b9565b92505060e0620006b48b828c016200056e565b9150509295985092959890939650565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200071357607f821691505b602082108103620007295762000728620006ce565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200078d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000750565b62000799868362000750565b95508019841693508086168417925050509392505050565b5f819050919050565b5f620007da620007d4620007ce84620004eb565b620007b1565b620004eb565b9050919050565b5f819050919050565b620007f583620007ba565b6200080d6200080482620007e1565b8484546200075c565b825550505050565b5f90565b6200082362000815565b62000830818484620007ea565b505050565b5b8181101562000857576200084b5f8262000819565b60018101905062000836565b5050565b601f821115620008a65762000870816200072f565b6200087b8462000741565b810160208510156200088b578190505b620008a36200089a8562000741565b83018262000835565b50505b505050565b5f82821c905092915050565b5f620008c85f1984600802620008ab565b1980831691505092915050565b5f620008e28383620008b7565b9150826002028217905092915050565b620008fd82620006c4565b67ffffffffffffffff8111156200091957620009186200038f565b5b620009258254620006fb565b620009328282856200085b565b5f60209050601f83116001811462000968575f841562000953578287015190505b6200095f8582620008d5565b865550620009ce565b601f19841662000978866200072f565b5f5b82811015620009a1578489015182556001820191506020850194506020810190506200097a565b86831015620009c15784890151620009bd601f891682620008b7565b8355505b6001600288020188555050505b505050505050565b620009e18162000542565b82525050565b5f602082019050620009fc5f830184620009d6565b92915050565b6131c78062000a105f395ff3fe6080604052600436106101c1575f3560e01c80636352211e116100f6578063a22cb46511610094578063d5abeb0111610063578063d5abeb0114610607578063e2142fde14610631578063e985e9c51461066d578063f2fde38b146106a9576101c1565b8063a22cb46514610551578063b88d4fde14610579578063c87b56dd146105a1578063caa0f92a146105dd576101c1565b80638043c9c0116100d05780638043c9c0146104ab5780638da5cb5b146104d5578063931688cb146104ff57806395d89b4114610527576101c1565b80636352211e1461041d57806370a0823114610459578063715018a614610495576101c1565b80631e3bcc8e116101635780633ccfd60b1161013d5780633ccfd60b1461037957806342842e0e1461038f5780634bfbe5df146103b75780634f6ccce7146103e1576101c1565b80631e3bcc8e146102ed57806323b872dd146103155780632f745c591461033d576101c1565b8063095ea7b31161019f578063095ea7b3146102675780631209b1f61461028f5780631249c58b146102b957806318160ddd146102c3576101c1565b806301ffc9a7146101c557806306fdde0314610201578063081812fc1461022b575b5f80fd5b3480156101d0575f80fd5b506101eb60048036038101906101e6919061245a565b6106d1565b6040516101f8919061249f565b60405180910390f35b34801561020c575f80fd5b5061021561074a565b6040516102229190612542565b60405180910390f35b348015610236575f80fd5b50610251600480360381019061024c9190612595565b6107d9565b60405161025e91906125ff565b60405180910390f35b348015610272575f80fd5b5061028d60048036038101906102889190612642565b6107f4565b005b34801561029a575f80fd5b506102a361080a565b6040516102b0919061268f565b60405180910390f35b6102c1610810565b005b3480156102ce575f80fd5b506102d76108c5565b6040516102e4919061268f565b60405180910390f35b3480156102f8575f80fd5b50610313600480360381019061030e91906126a8565b6108d1565b005b348015610320575f80fd5b5061033b600480360381019061033691906126d3565b61094a565b005b348015610348575f80fd5b50610363600480360381019061035e9190612642565b610a49565b604051610370919061268f565b60405180910390f35b348015610384575f80fd5b5061038d610aed565b005b34801561039a575f80fd5b506103b560048036038101906103b091906126d3565b610bee565b005b3480156103c2575f80fd5b506103cb610c0d565b6040516103d8919061268f565b60405180910390f35b3480156103ec575f80fd5b5061040760048036038101906104029190612595565b610c13565b604051610414919061268f565b60405180910390f35b348015610428575f80fd5b50610443600480360381019061043e9190612595565b610c85565b60405161045091906125ff565b60405180910390f35b348015610464575f80fd5b5061047f600480360381019061047a91906126a8565b610c96565b60405161048c919061268f565b60405180910390f35b3480156104a0575f80fd5b506104a9610d4c565b005b3480156104b6575f80fd5b506104bf610d5f565b6040516104cc9190612542565b60405180910390f35b3480156104e0575f80fd5b506104e9610deb565b6040516104f691906125ff565b60405180910390f35b34801561050a575f80fd5b5061052560048036038101906105209190612784565b610e13565b005b348015610532575f80fd5b5061053b610e31565b6040516105489190612542565b60405180910390f35b34801561055c575f80fd5b50610577600480360381019061057291906127f9565b610ec1565b005b348015610584575f80fd5b5061059f600480360381019061059a919061295f565b610ed7565b005b3480156105ac575f80fd5b506105c760048036038101906105c29190612595565b610efc565b6040516105d49190612542565b60405180910390f35b3480156105e8575f80fd5b506105f1610f62565b6040516105fe919061268f565b60405180910390f35b348015610612575f80fd5b5061061b610f6b565b604051610628919061268f565b60405180910390f35b34801561063c575f80fd5b50610657600480360381019061065291906126a8565b610f71565b604051610664919061249f565b60405180910390f35b348015610678575f80fd5b50610693600480360381019061068e91906129df565b610f84565b6040516106a0919061249f565b60405180910390f35b3480156106b4575f80fd5b506106cf60048036038101906106ca91906126a8565b611012565b005b5f7f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610743575061074282611096565b5b9050919050565b60605f805461075890612a4a565b80601f016020809104026020016040519081016040528092919081815260200182805461078490612a4a565b80156107cf5780601f106107a6576101008083540402835291602001916107cf565b820191905f5260205f20905b8154815290600101906020018083116107b257829003601f168201915b5050505050905090565b5f6107e382611177565b506107ed826111fd565b9050919050565b6108068282610801611236565b61123d565b5050565b600e5481565b600d5461081b6108c5565b1061085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290612ac4565b60405180910390fd5b600e543410156108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089790612b2c565b60405180910390fd5b6108ac3360105461124f565b60105f8154809291906108be90612b77565b9190505550565b5f600880549050905090565b6108d961126c565b600d546108e46108c5565b10610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90612ac4565b60405180910390fd5b6109308160105461124f565b60105f81548092919061094290612b77565b919050555050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109ba575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016109b191906125ff565b60405180910390fd5b5f6109cd83836109c8611236565b6112f3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a43578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610a3a93929190612bbe565b60405180910390fd5b50505050565b5f610a5383610c96565b8210610a985782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610a8f929190612bf3565b60405180910390fd5b60065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2054905092915050565b610af561126c565b5f4790505f8111610b3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3290612c64565b60405180910390fd5b5f610b44610deb565b73ffffffffffffffffffffffffffffffffffffffff1682604051610b6790612caf565b5f6040518083038185875af1925050503d805f8114610ba1576040519150601f19603f3d011682016040523d82523d5f602084013e610ba6565b606091505b5050905080610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190612d0d565b60405180910390fd5b5050565b610c0883838360405180602001604052805f815250610ed7565b505050565b600c5481565b5f610c1c6108c5565b8210610c61575f826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610c58929190612bf3565b60405180910390fd5b60088281548110610c7557610c74612d2b565b5b905f5260205f2001549050919050565b5f610c8f82611177565b9050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d07575f6040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610cfe91906125ff565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610d5461126c565b610d5d5f61140d565b565b600b8054610d6c90612a4a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9890612a4a565b8015610de35780601f10610dba57610100808354040283529160200191610de3565b820191905f5260205f20905b815481529060010190602001808311610dc657829003601f168201915b505050505081565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e1b61126c565b8181600f9182610e2c929190612eff565b505050565b606060018054610e4090612a4a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6c90612a4a565b8015610eb75780601f10610e8e57610100808354040283529160200191610eb7565b820191905f5260205f20905b815481529060010190602001808311610e9a57829003601f168201915b5050505050905090565b610ed3610ecc611236565b83836114d0565b5050565b610ee284848461094a565b610ef6610eed611236565b85858585611639565b50505050565b6060610f0782611177565b505f610f116117e5565b90505f815111610f2f5760405180602001604052805f815250610f5a565b80610f3984611875565b604051602001610f4a929190613006565b6040516020818303038152906040525b915050919050565b5f601054905090565b600d5481565b5f80610f7c83610c96565b119050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b61101a61126c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361108a575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161108191906125ff565b60405180910390fd5b6110938161140d565b50565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061116057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611170575061116f8261193f565b5b9050919050565b5f80611182836119a8565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111f457826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016111eb919061268f565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b61124a83838360016119e1565b505050565b611268828260405180602001604052805f815250611ba0565b5050565b611274611236565b73ffffffffffffffffffffffffffffffffffffffff16611292610deb565b73ffffffffffffffffffffffffffffffffffffffff16146112f1576112b5611236565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016112e891906125ff565b60405180910390fd5b565b5f80611300858585611bc3565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113435761133e84611dce565b611382565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611381576113808185611e12565b5b5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036113c3576113be84611ee9565b611402565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611401576114008585611fa9565b5b5b809150509392505050565b5f600a5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361154057816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161153791906125ff565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161162c919061249f565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156117de578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401611697949392919061307b565b6020604051808303815f875af19250505080156116d257506040513d601f19601f820116820180604052508101906116cf91906130d9565b60015b611753573d805f8114611700576040519150601f19603f3d011682016040523d82523d5f602084013e611705565b606091505b505f81510361174b57836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161174291906125ff565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117dc57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016117d391906125ff565b60405180910390fd5b505b5050505050565b6060600f80546117f490612a4a565b80601f016020809104026020016040519081016040528092919081815260200182805461182090612a4a565b801561186b5780601f106118425761010080835404028352916020019161186b565b820191905f5260205f20905b81548152906001019060200180831161184e57829003601f168201915b5050505050905090565b60605f60016118838461202d565b0190505f8167ffffffffffffffff8111156118a1576118a061283b565b5b6040519080825280601f01601f1916602001820160405280156118d35781602001600182028036833780820191505090505b5090505f82602001820190505b600115611934578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161192957611928613104565b5b0494505f85036118e0575b819350505050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611a1957505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611b4b575f611a2884611177565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611a9257508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611aa55750611aa38184610f84565b155b15611ae757826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611ade91906125ff565b60405180910390fd5b8115611b4957838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611baa838361217e565b611bbe611bb5611236565b5f858585611639565b505050565b5f80611bce846119a8565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c0f57611c0e818486612271565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611c9a57611c4e5f855f806119e1565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d1957600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b60088054905060095f8381526020019081526020015f2081905550600881908060018154018082558091505060019003905f5260205f20015f909190919091505550565b5f611e1c83610c96565b90505f60075f8481526020019081526020015f205490505f60065f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050828214611ebb575f815f8581526020019081526020015f2054905080825f8581526020019081526020015f20819055508260075f8381526020019081526020015f2081905550505b60075f8581526020019081526020015f205f9055805f8481526020019081526020015f205f90555050505050565b5f6001600880549050611efc9190613131565b90505f60095f8481526020019081526020015f205490505f60088381548110611f2857611f27612d2b565b5b905f5260205f20015490508060088381548110611f4857611f47612d2b565b5b905f5260205f2001819055508160095f8381526020019081526020015f208190555060095f8581526020019081526020015f205f90556008805480611f9057611f8f613164565b5b600190038181905f5260205f20015f9055905550505050565b5f6001611fb584610c96565b611fbf9190613131565b90508160065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055508060075f8481526020019081526020015f2081905550505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612089577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161207f5761207e613104565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106120c6576d04ee2d6d415b85acef810000000083816120bc576120bb613104565b5b0492506020810190505b662386f26fc1000083106120f557662386f26fc1000083816120eb576120ea613104565b5b0492506010810190505b6305f5e100831061211e576305f5e100838161211457612113613104565b5b0492506008810190505b612710831061214357612710838161213957612138613104565b5b0492506004810190505b60648310612166576064838161215c5761215b613104565b5b0492506002810190505b600a8310612175576001810190505b80915050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121ee575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016121e591906125ff565b60405180910390fd5b5f6121fa83835f6112f3565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461226c575f6040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161226391906125ff565b60405180910390fd5b505050565b61227c838383612334565b61232f575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122f057806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016122e7919061268f565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612326929190612bf3565b60405180910390fd5b505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156123eb57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806123ac57506123ab8484610f84565b5b806123ea57508273ffffffffffffffffffffffffffffffffffffffff166123d2836111fd565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61243981612405565b8114612443575f80fd5b50565b5f8135905061245481612430565b92915050565b5f6020828403121561246f5761246e6123fd565b5b5f61247c84828501612446565b91505092915050565b5f8115159050919050565b61249981612485565b82525050565b5f6020820190506124b25f830184612490565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156124ef5780820151818401526020810190506124d4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612514826124b8565b61251e81856124c2565b935061252e8185602086016124d2565b612537816124fa565b840191505092915050565b5f6020820190508181035f83015261255a818461250a565b905092915050565b5f819050919050565b61257481612562565b811461257e575f80fd5b50565b5f8135905061258f8161256b565b92915050565b5f602082840312156125aa576125a96123fd565b5b5f6125b784828501612581565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6125e9826125c0565b9050919050565b6125f9816125df565b82525050565b5f6020820190506126125f8301846125f0565b92915050565b612621816125df565b811461262b575f80fd5b50565b5f8135905061263c81612618565b92915050565b5f8060408385031215612658576126576123fd565b5b5f6126658582860161262e565b925050602061267685828601612581565b9150509250929050565b61268981612562565b82525050565b5f6020820190506126a25f830184612680565b92915050565b5f602082840312156126bd576126bc6123fd565b5b5f6126ca8482850161262e565b91505092915050565b5f805f606084860312156126ea576126e96123fd565b5b5f6126f78682870161262e565b93505060206127088682870161262e565b925050604061271986828701612581565b9150509250925092565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261274457612743612723565b5b8235905067ffffffffffffffff81111561276157612760612727565b5b60208301915083600182028301111561277d5761277c61272b565b5b9250929050565b5f806020838503121561279a576127996123fd565b5b5f83013567ffffffffffffffff8111156127b7576127b6612401565b5b6127c38582860161272f565b92509250509250929050565b6127d881612485565b81146127e2575f80fd5b50565b5f813590506127f3816127cf565b92915050565b5f806040838503121561280f5761280e6123fd565b5b5f61281c8582860161262e565b925050602061282d858286016127e5565b9150509250929050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612871826124fa565b810181811067ffffffffffffffff821117156128905761288f61283b565b5b80604052505050565b5f6128a26123f4565b90506128ae8282612868565b919050565b5f67ffffffffffffffff8211156128cd576128cc61283b565b5b6128d6826124fa565b9050602081019050919050565b828183375f83830152505050565b5f6129036128fe846128b3565b612899565b90508281526020810184848401111561291f5761291e612837565b5b61292a8482856128e3565b509392505050565b5f82601f83011261294657612945612723565b5b81356129568482602086016128f1565b91505092915050565b5f805f8060808587031215612977576129766123fd565b5b5f6129848782880161262e565b94505060206129958782880161262e565b93505060406129a687828801612581565b925050606085013567ffffffffffffffff8111156129c7576129c6612401565b5b6129d387828801612932565b91505092959194509250565b5f80604083850312156129f5576129f46123fd565b5b5f612a028582860161262e565b9250506020612a138582860161262e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612a6157607f821691505b602082108103612a7457612a73612a1d565b5b50919050565b7f416c6c207469636b65747320736f6c64000000000000000000000000000000005f82015250565b5f612aae6010836124c2565b9150612ab982612a7a565b602082019050919050565b5f6020820190508181035f830152612adb81612aa2565b9050919050565b7f4e6f7420656e6f756768204554482073656e74000000000000000000000000005f82015250565b5f612b166013836124c2565b9150612b2182612ae2565b602082019050919050565b5f6020820190508181035f830152612b4381612b0a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612b8182612562565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bb357612bb2612b4a565b5b600182019050919050565b5f606082019050612bd15f8301866125f0565b612bde6020830185612680565b612beb60408301846125f0565b949350505050565b5f604082019050612c065f8301856125f0565b612c136020830184612680565b9392505050565b7f4e6f2066756e64730000000000000000000000000000000000000000000000005f82015250565b5f612c4e6008836124c2565b9150612c5982612c1a565b602082019050919050565b5f6020820190508181035f830152612c7b81612c42565b9050919050565b5f81905092915050565b50565b5f612c9a5f83612c82565b9150612ca582612c8c565b5f82019050919050565b5f612cb982612c8f565b9150819050919050565b7f4661696c656420746f2073656e642045746865720000000000000000000000005f82015250565b5f612cf76014836124c2565b9150612d0282612cc3565b602082019050919050565b5f6020820190508181035f830152612d2481612ceb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612dbe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d83565b612dc88683612d83565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612e03612dfe612df984612562565b612de0565b612562565b9050919050565b5f819050919050565b612e1c83612de9565b612e30612e2882612e0a565b848454612d8f565b825550505050565b5f90565b612e44612e38565b612e4f818484612e13565b505050565b5b81811015612e7257612e675f82612e3c565b600181019050612e55565b5050565b601f821115612eb757612e8881612d62565b612e9184612d74565b81016020851015612ea0578190505b612eb4612eac85612d74565b830182612e54565b50505b505050565b5f82821c905092915050565b5f612ed75f1984600802612ebc565b1980831691505092915050565b5f612eef8383612ec8565b9150826002028217905092915050565b612f098383612d58565b67ffffffffffffffff811115612f2257612f2161283b565b5b612f2c8254612a4a565b612f37828285612e76565b5f601f831160018114612f64575f8415612f52578287013590505b612f5c8582612ee4565b865550612fc3565b601f198416612f7286612d62565b5f5b82811015612f9957848901358255600182019150602085019450602081019050612f74565b86831015612fb65784890135612fb2601f891682612ec8565b8355505b6001600288020188555050505b50505050505050565b5f81905092915050565b5f612fe0826124b8565b612fea8185612fcc565b9350612ffa8185602086016124d2565b80840191505092915050565b5f6130118285612fd6565b915061301d8284612fd6565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f61304d82613029565b6130578185613033565b93506130678185602086016124d2565b613070816124fa565b840191505092915050565b5f60808201905061308e5f8301876125f0565b61309b60208301866125f0565b6130a86040830185612680565b81810360608301526130ba8184613043565b905095945050505050565b5f815190506130d381612430565b92915050565b5f602082840312156130ee576130ed6123fd565b5b5f6130fb848285016130c5565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61313b82612562565b915061314683612562565b925082820390508181111561315e5761315d612b4a565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea2646970667358221220b2de2b77f81190891f89b5d78975c414785e5a9b9b1a8df6808edff977f4c6c864736f6c63430008180033",
}

// TicketABI is the input ABI used to generate the binding from.
// Deprecated: Use TicketMetaData.ABI instead.
var TicketABI = TicketMetaData.ABI

// TicketBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TicketMetaData.Bin instead.
var TicketBin = TicketMetaData.Bin

// DeployTicket deploys a new Ethereum contract, binding an instance of Ticket to it.
func DeployTicket(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string, _eventName string, _eventDate *big.Int, _maxSupply *big.Int, _ticketPrice *big.Int, baseURI_ string, _organizer common.Address) (common.Address, *types.Transaction, *Ticket, error) {
	parsed, err := TicketMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TicketBin), backend, _name, _symbol, _eventName, _eventDate, _maxSupply, _ticketPrice, baseURI_, _organizer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ticket{TicketCaller: TicketCaller{contract: contract}, TicketTransactor: TicketTransactor{contract: contract}, TicketFilterer: TicketFilterer{contract: contract}}, nil
}

// Ticket is an auto generated Go binding around an Ethereum contract.
type Ticket struct {
	TicketCaller     // Read-only binding to the contract
	TicketTransactor // Write-only binding to the contract
	TicketFilterer   // Log filterer for contract events
}

// TicketCaller is an auto generated read-only Go binding around an Ethereum contract.
type TicketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TicketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TicketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TicketSession struct {
	Contract     *Ticket           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TicketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TicketCallerSession struct {
	Contract *TicketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TicketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TicketTransactorSession struct {
	Contract     *TicketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TicketRaw is an auto generated low-level Go binding around an Ethereum contract.
type TicketRaw struct {
	Contract *Ticket // Generic contract binding to access the raw methods on
}

// TicketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TicketCallerRaw struct {
	Contract *TicketCaller // Generic read-only contract binding to access the raw methods on
}

// TicketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TicketTransactorRaw struct {
	Contract *TicketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTicket creates a new instance of Ticket, bound to a specific deployed contract.
func NewTicket(address common.Address, backend bind.ContractBackend) (*Ticket, error) {
	contract, err := bindTicket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ticket{TicketCaller: TicketCaller{contract: contract}, TicketTransactor: TicketTransactor{contract: contract}, TicketFilterer: TicketFilterer{contract: contract}}, nil
}

// NewTicketCaller creates a new read-only instance of Ticket, bound to a specific deployed contract.
func NewTicketCaller(address common.Address, caller bind.ContractCaller) (*TicketCaller, error) {
	contract, err := bindTicket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TicketCaller{contract: contract}, nil
}

// NewTicketTransactor creates a new write-only instance of Ticket, bound to a specific deployed contract.
func NewTicketTransactor(address common.Address, transactor bind.ContractTransactor) (*TicketTransactor, error) {
	contract, err := bindTicket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TicketTransactor{contract: contract}, nil
}

// NewTicketFilterer creates a new log filterer instance of Ticket, bound to a specific deployed contract.
func NewTicketFilterer(address common.Address, filterer bind.ContractFilterer) (*TicketFilterer, error) {
	contract, err := bindTicket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TicketFilterer{contract: contract}, nil
}

// bindTicket binds a generic wrapper to an already deployed contract.
func bindTicket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TicketMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ticket *TicketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ticket.Contract.TicketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ticket *TicketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ticket.Contract.TicketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ticket *TicketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ticket.Contract.TicketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ticket *TicketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ticket.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ticket *TicketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ticket.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ticket *TicketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ticket.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Ticket *TicketCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Ticket *TicketSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Ticket.Contract.BalanceOf(&_Ticket.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Ticket *TicketCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Ticket.Contract.BalanceOf(&_Ticket.CallOpts, owner)
}

// EventDate is a free data retrieval call binding the contract method 0x4bfbe5df.
//
// Solidity: function eventDate() view returns(uint256)
func (_Ticket *TicketCaller) EventDate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "eventDate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EventDate is a free data retrieval call binding the contract method 0x4bfbe5df.
//
// Solidity: function eventDate() view returns(uint256)
func (_Ticket *TicketSession) EventDate() (*big.Int, error) {
	return _Ticket.Contract.EventDate(&_Ticket.CallOpts)
}

// EventDate is a free data retrieval call binding the contract method 0x4bfbe5df.
//
// Solidity: function eventDate() view returns(uint256)
func (_Ticket *TicketCallerSession) EventDate() (*big.Int, error) {
	return _Ticket.Contract.EventDate(&_Ticket.CallOpts)
}

// EventName is a free data retrieval call binding the contract method 0x8043c9c0.
//
// Solidity: function eventName() view returns(string)
func (_Ticket *TicketCaller) EventName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "eventName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// EventName is a free data retrieval call binding the contract method 0x8043c9c0.
//
// Solidity: function eventName() view returns(string)
func (_Ticket *TicketSession) EventName() (string, error) {
	return _Ticket.Contract.EventName(&_Ticket.CallOpts)
}

// EventName is a free data retrieval call binding the contract method 0x8043c9c0.
//
// Solidity: function eventName() view returns(string)
func (_Ticket *TicketCallerSession) EventName() (string, error) {
	return _Ticket.Contract.EventName(&_Ticket.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Ticket *TicketCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Ticket *TicketSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Ticket.Contract.GetApproved(&_Ticket.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Ticket *TicketCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Ticket.Contract.GetApproved(&_Ticket.CallOpts, tokenId)
}

// GetNextTokenId is a free data retrieval call binding the contract method 0xcaa0f92a.
//
// Solidity: function getNextTokenId() view returns(uint256)
func (_Ticket *TicketCaller) GetNextTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "getNextTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNextTokenId is a free data retrieval call binding the contract method 0xcaa0f92a.
//
// Solidity: function getNextTokenId() view returns(uint256)
func (_Ticket *TicketSession) GetNextTokenId() (*big.Int, error) {
	return _Ticket.Contract.GetNextTokenId(&_Ticket.CallOpts)
}

// GetNextTokenId is a free data retrieval call binding the contract method 0xcaa0f92a.
//
// Solidity: function getNextTokenId() view returns(uint256)
func (_Ticket *TicketCallerSession) GetNextTokenId() (*big.Int, error) {
	return _Ticket.Contract.GetNextTokenId(&_Ticket.CallOpts)
}

// HasTicket is a free data retrieval call binding the contract method 0xe2142fde.
//
// Solidity: function hasTicket(address user) view returns(bool)
func (_Ticket *TicketCaller) HasTicket(opts *bind.CallOpts, user common.Address) (bool, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "hasTicket", user)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasTicket is a free data retrieval call binding the contract method 0xe2142fde.
//
// Solidity: function hasTicket(address user) view returns(bool)
func (_Ticket *TicketSession) HasTicket(user common.Address) (bool, error) {
	return _Ticket.Contract.HasTicket(&_Ticket.CallOpts, user)
}

// HasTicket is a free data retrieval call binding the contract method 0xe2142fde.
//
// Solidity: function hasTicket(address user) view returns(bool)
func (_Ticket *TicketCallerSession) HasTicket(user common.Address) (bool, error) {
	return _Ticket.Contract.HasTicket(&_Ticket.CallOpts, user)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Ticket *TicketCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Ticket *TicketSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Ticket.Contract.IsApprovedForAll(&_Ticket.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Ticket *TicketCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Ticket.Contract.IsApprovedForAll(&_Ticket.CallOpts, owner, operator)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_Ticket *TicketCaller) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "maxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_Ticket *TicketSession) MaxSupply() (*big.Int, error) {
	return _Ticket.Contract.MaxSupply(&_Ticket.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_Ticket *TicketCallerSession) MaxSupply() (*big.Int, error) {
	return _Ticket.Contract.MaxSupply(&_Ticket.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Ticket *TicketCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Ticket *TicketSession) Name() (string, error) {
	return _Ticket.Contract.Name(&_Ticket.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Ticket *TicketCallerSession) Name() (string, error) {
	return _Ticket.Contract.Name(&_Ticket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ticket *TicketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ticket *TicketSession) Owner() (common.Address, error) {
	return _Ticket.Contract.Owner(&_Ticket.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ticket *TicketCallerSession) Owner() (common.Address, error) {
	return _Ticket.Contract.Owner(&_Ticket.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Ticket *TicketCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Ticket *TicketSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Ticket.Contract.OwnerOf(&_Ticket.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Ticket *TicketCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Ticket.Contract.OwnerOf(&_Ticket.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Ticket *TicketCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Ticket *TicketSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Ticket.Contract.SupportsInterface(&_Ticket.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Ticket *TicketCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Ticket.Contract.SupportsInterface(&_Ticket.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Ticket *TicketCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Ticket *TicketSession) Symbol() (string, error) {
	return _Ticket.Contract.Symbol(&_Ticket.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Ticket *TicketCallerSession) Symbol() (string, error) {
	return _Ticket.Contract.Symbol(&_Ticket.CallOpts)
}

// TicketPrice is a free data retrieval call binding the contract method 0x1209b1f6.
//
// Solidity: function ticketPrice() view returns(uint256)
func (_Ticket *TicketCaller) TicketPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "ticketPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TicketPrice is a free data retrieval call binding the contract method 0x1209b1f6.
//
// Solidity: function ticketPrice() view returns(uint256)
func (_Ticket *TicketSession) TicketPrice() (*big.Int, error) {
	return _Ticket.Contract.TicketPrice(&_Ticket.CallOpts)
}

// TicketPrice is a free data retrieval call binding the contract method 0x1209b1f6.
//
// Solidity: function ticketPrice() view returns(uint256)
func (_Ticket *TicketCallerSession) TicketPrice() (*big.Int, error) {
	return _Ticket.Contract.TicketPrice(&_Ticket.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Ticket *TicketCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Ticket *TicketSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Ticket.Contract.TokenByIndex(&_Ticket.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Ticket *TicketCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Ticket.Contract.TokenByIndex(&_Ticket.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Ticket *TicketCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Ticket *TicketSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Ticket.Contract.TokenOfOwnerByIndex(&_Ticket.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Ticket *TicketCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Ticket.Contract.TokenOfOwnerByIndex(&_Ticket.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Ticket *TicketCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Ticket *TicketSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Ticket.Contract.TokenURI(&_Ticket.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Ticket *TicketCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Ticket.Contract.TokenURI(&_Ticket.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Ticket *TicketCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ticket.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Ticket *TicketSession) TotalSupply() (*big.Int, error) {
	return _Ticket.Contract.TotalSupply(&_Ticket.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Ticket *TicketCallerSession) TotalSupply() (*big.Int, error) {
	return _Ticket.Contract.TotalSupply(&_Ticket.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Ticket *TicketTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Ticket *TicketSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.Contract.Approve(&_Ticket.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Ticket *TicketTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.Contract.Approve(&_Ticket.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x1249c58b.
//
// Solidity: function mint() payable returns()
func (_Ticket *TicketTransactor) Mint(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "mint")
}

// Mint is a paid mutator transaction binding the contract method 0x1249c58b.
//
// Solidity: function mint() payable returns()
func (_Ticket *TicketSession) Mint() (*types.Transaction, error) {
	return _Ticket.Contract.Mint(&_Ticket.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x1249c58b.
//
// Solidity: function mint() payable returns()
func (_Ticket *TicketTransactorSession) Mint() (*types.Transaction, error) {
	return _Ticket.Contract.Mint(&_Ticket.TransactOpts)
}

// OwnerMint is a paid mutator transaction binding the contract method 0x1e3bcc8e.
//
// Solidity: function ownerMint(address to) returns()
func (_Ticket *TicketTransactor) OwnerMint(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "ownerMint", to)
}

// OwnerMint is a paid mutator transaction binding the contract method 0x1e3bcc8e.
//
// Solidity: function ownerMint(address to) returns()
func (_Ticket *TicketSession) OwnerMint(to common.Address) (*types.Transaction, error) {
	return _Ticket.Contract.OwnerMint(&_Ticket.TransactOpts, to)
}

// OwnerMint is a paid mutator transaction binding the contract method 0x1e3bcc8e.
//
// Solidity: function ownerMint(address to) returns()
func (_Ticket *TicketTransactorSession) OwnerMint(to common.Address) (*types.Transaction, error) {
	return _Ticket.Contract.OwnerMint(&_Ticket.TransactOpts, to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ticket *TicketTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ticket *TicketSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ticket.Contract.RenounceOwnership(&_Ticket.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ticket *TicketTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ticket.Contract.RenounceOwnership(&_Ticket.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Ticket *TicketTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Ticket *TicketSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.Contract.SafeTransferFrom(&_Ticket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Ticket *TicketTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.Contract.SafeTransferFrom(&_Ticket.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Ticket *TicketTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Ticket *TicketSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Ticket.Contract.SafeTransferFrom0(&_Ticket.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Ticket *TicketTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Ticket.Contract.SafeTransferFrom0(&_Ticket.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Ticket *TicketTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Ticket *TicketSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Ticket.Contract.SetApprovalForAll(&_Ticket.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Ticket *TicketTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Ticket.Contract.SetApprovalForAll(&_Ticket.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Ticket *TicketTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Ticket *TicketSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.Contract.TransferFrom(&_Ticket.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Ticket *TicketTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Ticket.Contract.TransferFrom(&_Ticket.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ticket *TicketTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ticket *TicketSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ticket.Contract.TransferOwnership(&_Ticket.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ticket *TicketTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ticket.Contract.TransferOwnership(&_Ticket.TransactOpts, newOwner)
}

// UpdateBaseURI is a paid mutator transaction binding the contract method 0x931688cb.
//
// Solidity: function updateBaseURI(string newURI) returns()
func (_Ticket *TicketTransactor) UpdateBaseURI(opts *bind.TransactOpts, newURI string) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "updateBaseURI", newURI)
}

// UpdateBaseURI is a paid mutator transaction binding the contract method 0x931688cb.
//
// Solidity: function updateBaseURI(string newURI) returns()
func (_Ticket *TicketSession) UpdateBaseURI(newURI string) (*types.Transaction, error) {
	return _Ticket.Contract.UpdateBaseURI(&_Ticket.TransactOpts, newURI)
}

// UpdateBaseURI is a paid mutator transaction binding the contract method 0x931688cb.
//
// Solidity: function updateBaseURI(string newURI) returns()
func (_Ticket *TicketTransactorSession) UpdateBaseURI(newURI string) (*types.Transaction, error) {
	return _Ticket.Contract.UpdateBaseURI(&_Ticket.TransactOpts, newURI)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Ticket *TicketTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ticket.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Ticket *TicketSession) Withdraw() (*types.Transaction, error) {
	return _Ticket.Contract.Withdraw(&_Ticket.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Ticket *TicketTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Ticket.Contract.Withdraw(&_Ticket.TransactOpts)
}

// TicketApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Ticket contract.
type TicketApprovalIterator struct {
	Event *TicketApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketApproval represents a Approval event raised by the Ticket contract.
type TicketApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Ticket *TicketFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TicketApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Ticket.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TicketApprovalIterator{contract: _Ticket.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Ticket *TicketFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TicketApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Ticket.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketApproval)
				if err := _Ticket.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Ticket *TicketFilterer) ParseApproval(log types.Log) (*TicketApproval, error) {
	event := new(TicketApproval)
	if err := _Ticket.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Ticket contract.
type TicketApprovalForAllIterator struct {
	Event *TicketApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketApprovalForAll represents a ApprovalForAll event raised by the Ticket contract.
type TicketApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Ticket *TicketFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TicketApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Ticket.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TicketApprovalForAllIterator{contract: _Ticket.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Ticket *TicketFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TicketApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Ticket.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketApprovalForAll)
				if err := _Ticket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Ticket *TicketFilterer) ParseApprovalForAll(log types.Log) (*TicketApprovalForAll, error) {
	event := new(TicketApprovalForAll)
	if err := _Ticket.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ticket contract.
type TicketOwnershipTransferredIterator struct {
	Event *TicketOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketOwnershipTransferred represents a OwnershipTransferred event raised by the Ticket contract.
type TicketOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ticket *TicketFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TicketOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ticket.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TicketOwnershipTransferredIterator{contract: _Ticket.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ticket *TicketFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TicketOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ticket.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketOwnershipTransferred)
				if err := _Ticket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ticket *TicketFilterer) ParseOwnershipTransferred(log types.Log) (*TicketOwnershipTransferred, error) {
	event := new(TicketOwnershipTransferred)
	if err := _Ticket.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TicketTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Ticket contract.
type TicketTransferIterator struct {
	Event *TicketTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TicketTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TicketTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TicketTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TicketTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TicketTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TicketTransfer represents a Transfer event raised by the Ticket contract.
type TicketTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Ticket *TicketFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TicketTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Ticket.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TicketTransferIterator{contract: _Ticket.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Ticket *TicketFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TicketTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Ticket.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TicketTransfer)
				if err := _Ticket.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Ticket *TicketFilterer) ParseTransfer(log types.Log) (*TicketTransfer, error) {
	event := new(TicketTransfer)
	if err := _Ticket.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
